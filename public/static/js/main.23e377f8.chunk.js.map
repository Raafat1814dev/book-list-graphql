{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getAuthorsQuery","gql","_templateObject","getBooksQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","console","log","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","onClick","e","setState","displayBooks","components_BookDetails","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","document","getElementById","reset","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_esm","components_BookList","components_AddBook","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.23e377f8.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\n\r\nexport const getAuthorsQuery = gql`\r\n  {\r\n    authors {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getBooksQuery = gql`\r\n  {\r\n    books {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n/*\r\nexport const addBookMutation = gql`\r\n  mutation {\r\n    addBook(name: \"\", genre: \"\", authorId: \"\") {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n*/\r\n// with the query variables\r\n// $ -> to say it is a query variable\r\n// the \" ! \"  to say it is required // not null\r\nexport const addBookMutation = gql`\r\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\r\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getBookQuery = gql`\r\n  query($id: ID) {\r\n    book(id: $id) {\r\n      id\r\n      name\r\n      genre\r\n      author {\r\n        id\r\n        name\r\n        age\r\n        books {\r\n          name\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n// another way to export the Queries\r\n// export {getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery}\r\n","import React, { Component } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { getBookQuery } from \"../queries/queries\";\r\n\r\nclass BookDetails extends Component {\r\n  displayBookDetails() {\r\n    const { book } = this.props.data;\r\n    if (book) {\r\n      return (\r\n        <div>\r\n          <h2>{book.name}</h2>\r\n          <p>{book.genre}</p>\r\n          <p>{book.author.name}</p>\r\n          <p>All books by this author: </p>\r\n          <ul className=\"other-books\">\r\n            {book.author.books.map(item => {\r\n              return <li key={item.id}>{item.name}</li>;\r\n            })}\r\n          </ul>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div>No book selected ... </div>;\r\n    }\r\n  }\r\n  render() {\r\n    console.log(this.props);\r\n    return (\r\n      <div id=\"book-details\">\r\n        <p>Output book details here </p>\r\n        {this.displayBookDetails()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// without a variable\r\n// export default graphql(getBookQuery)(BookDetails);\r\n// with a variable\r\nexport default graphql(getBookQuery, {\r\n  // so whenever that props updates, this function is going to rerun\r\n  // and reset the variables for the query\r\n  options: props => {\r\n    return {\r\n      variables: {\r\n        id: props.bookId\r\n      }\r\n    };\r\n  }\r\n})(BookDetails);\r\n\r\n// to show the information of a selected book // go to BookList.js\r\n// 1. we need to listen out for when a user clicks on one of the items (book name)\r\n// 2. find out the ID of the item that was clicked\r\n// 3. pass the ID as a prop down into the BookDetails-component\r\n// 4. when we have the ID as a prop, we can easily use that prop as\r\n// a query variable in the query associated with this component\r\n// to go and get a single book !!!!\r\n","import React, { Component } from \"react\";\r\n\r\n//#######################################\r\n// import { gql } from \"apollo-boost\";\r\nimport { getBooksQuery } from \"../queries/queries\";\r\nimport { graphql } from \"react-apollo\";\r\n\r\n// components\r\nimport BookDetails from \"./BookDetails\";\r\n\r\n// 1. create a query   // we place the query directly after the gql`inside a template string`\r\n/*\r\nconst getBooksQuery = gql`\r\n  {\r\n    books {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n*/\r\nclass BookList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selected: null\r\n    };\r\n  }\r\n\r\n  // function to control the output of the book data to the screen in the component\r\n  displayBooks() {\r\n    var data = this.props.data;\r\n    if (data.loading) {\r\n      return <div>Loading Books ...</div>;\r\n    } else {\r\n      return data.books.map(book => {\r\n        // return <li key={book.id}> {book.name} </li>;\r\n        return (\r\n          <li\r\n            key={book.id}\r\n            onClick={e => {\r\n              this.setState({ selected: book.id });\r\n            }}\r\n          >\r\n            {\" \"}\r\n            {book.name}{\" \"}\r\n          </li>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // this is the place where the query is !!!!!\r\n    console.log(this.props);\r\n\r\n    return (\r\n      <div>\r\n        <ul id=\"book-list\">\r\n          {/* <li>Book name</li> */}\r\n          {this.displayBooks()}\r\n        </ul>\r\n        <BookDetails bookId={this.state.selected} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// export default BookList;\r\n// 2. bind the query to the component\r\nexport default graphql(getBooksQuery)(BookList);\r\n\r\n// we will feed the queries to the GraphQL client >> Apollo\r\n// which will send the request to the server\r\n// the Server then is going to respond feed the Data back\r\n// to our GraphQL client >>> Apollo, which will then pass it\r\n// back into our React application\r\n\r\n// so we can think of the GraphQL client as the thing that is\r\n// in charge of the passage of data between the front-end\r\n// and the Server (back-end)\r\n// npm install apollo-boost react-apollo graphql\r\n\r\n// #########################\r\n// who do we make queries in a component ?\r\n// 1. we need to construct a query // like we did in GraphQL\r\n// 2. we take that query and we bind it to the component, so\r\n// that we inside the component we have access to all the data that\r\n// comes back from the query\r\n","// create a query to retrieve the Authors so that we can put them\r\n// in a drop down list so we could choose from it\r\n// because we don't expect the user to know the author ID\r\nimport React, { Component } from \"react\";\r\n// import { gql } from \"apollo-boost\";\r\nimport {\r\n  getAuthorsQuery,\r\n  addBookMutation,\r\n  getBooksQuery\r\n} from \"../queries/queries\";\r\n// we will use the compose to bind more than one query to this component\r\nimport { graphql, compose } from \"react-apollo\";\r\n/*\r\nconst getAuthorsQuery = gql`\r\n  {\r\n    authors {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n*/\r\n\r\nclass AddBook extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      genre: \"\",\r\n      authorId: \"\"\r\n    };\r\n  }\r\n  displayAuthors() {\r\n    // var data = this.props.data;\r\n    // console.log(this.props); // this shows us that we now get two different\r\n    // queries not like when we hade only one query we recieved only data\r\n    // but now we get back  addBookMutation and getAuthorQuery\r\n    var data = this.props.getAuthorsQuery; // this name comes from the\r\n    // down where we made the binding and gave it a name\r\n    // graphql(getAuthorsQuery, {name: \"getAuthorsQuery\"})\r\n\r\n    if (data.loading) {\r\n      return <option disabled>Loading Authors....</option>;\r\n    } else {\r\n      return data.authors.map(author => {\r\n        return (\r\n          // the \"value\" we need it so we know which option is selected\r\n          // so we can take the id to use it to create a new book\r\n          <option value={author.id} key={author.id}>\r\n            {author.name}\r\n          </option>\r\n        );\r\n      });\r\n    }\r\n  }\r\n  submitForm(e) {\r\n    // when we click on the button .. it automatically refresh the page\r\n    // that is the default behavior, and we want to stop that default behavior\r\n    e.preventDefault();\r\n\r\n    // console.log(this.state);\r\n    // this.props.addBookMutation(); // this name comes from the end of the page\r\n    // where we bind the two Queries to this component .. we gave them a name too !!!!\r\n    if (\r\n      this.state.name &&\r\n      this.state.genre &&\r\n      this.state.authorId &&\r\n      this.state.authorId !== \"Select author\"\r\n    ) {\r\n      this.props.addBookMutation({\r\n        variables: {\r\n          name: this.state.name,\r\n          genre: this.state.genre,\r\n          authorId: this.state.authorId\r\n        },\r\n        // to tell GraphQL to or now it is Apollo\r\n        // to go and re-fetch a particular query\r\n        refetchQueries: [{ query: getBooksQuery }]\r\n      });\r\n    }\r\n    // clear the form and the values after submitting\r\n    document.getElementById(\"add-book\").reset();\r\n    this.setState({\r\n      name: \"\",\r\n      genre: \"\",\r\n      authorId: \"\"\r\n    });\r\n  }\r\n  // todo >>> change the place where you update the state\r\n  //! the state should not be updated in the render() method !!!!\r\n  render() {\r\n    return (\r\n      // we need to attach an event-Listener to this form\r\n      // so that when it is submitted we fire some kind of a function\r\n      <form id=\"add-book\" onSubmit={this.submitForm.bind(this)}>\r\n        <div className=\"field\">\r\n          <label>Book name:</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e => this.setState({ name: e.target.value })}\r\n          />\r\n        </div>\r\n        <div className=\"field\">\r\n          <label>Genre:</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e => this.setState({ genre: e.target.value })}\r\n          />\r\n        </div>\r\n        <div className=\"field\">\r\n          <label>Author:</label>\r\n          <select onChange={e => this.setState({ authorId: e.target.value })}>\r\n            <option>Select author</option>\r\n            {this.displayAuthors()}\r\n          </select>\r\n        </div>\r\n        <button>+</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n// bind the Query to this Component !!!\r\n// export default graphql(getAuthorsQuery)(AddBook);\r\n\r\n// bind more than one queries to the component using compose !!!!\r\nexport default compose(\r\n  graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\r\n  graphql(addBookMutation, { name: \"addBookMutation\" })\r\n)(AddBook);\r\n","import React from \"react\";\n// Imports ############################################\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n// ApolloProvider to wrap our application and inject whatever data we receive\n// from the Server into our application\n\n// components\nimport BookList from \"./components/BookList.js\";\nimport AddBook from \"./components/AddBook\";\n\n// Apollo client setup #################################\nconst client = new ApolloClient({\n  // uri is going to be the endpoint that we are making requests or queries too\n  // we set that up at the beginning // the endpoint that handles all of our GraphQL Queries\n\n  // uri: \"http://localhost:4000/graphql\" // the uri for the Development environment\n  uri: \"/graphql\" // the uri for the Production environment\n\n  // now apollo knows that we are going to make requests to this endpoint\n  // from our application\n});\n\nfunction App() {\n  return (\n    // surrounding all our template with the TAG ####################\n    // and we need to say what client this is going to be using !!\n    <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Reading list !!</h1>\n        <BookList />\n        <AddBook />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}